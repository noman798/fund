'use strict';

var slm = require("slm");

require("slm-markdown").register(slm.template);

var loaderUtils = require("loader-utils");

var coffee = require('coffee-script');
function coffee_register(template, engineName, options) {
    if (engineName == null) {
      engineName = 'coffee';
    }
    template.registerEmbeddedFunction(engineName, function(string) {
      var result = '<script>';
      result += coffee.compile(string);
      result += '</script>';
      return result;
    });
    return coffee;
}
coffee_register(slm.template);


var sass = require('node-sass');

function scss_register(template, engineName, options) {
    if (engineName == null) {
      engineName = 'scss';
    }
    template.registerEmbeddedFunction(engineName, function(string) {
      var result = '<style>';
      result += sass.renderSync({
            data: string 
      });
      result += '</style>';
      return result;
    });
    return coffee;
}
scss_register(slm.template);


module.exports = function(source) {
  this.cacheable && this.cacheable(true);

  var resolveRoot = this.options && this.options.resolve && this.options.resolve.root;
  var options = loaderUtils.getLoaderConfig(this, 'slmLoader') || {};
  if (!options.basePath && resolveRoot) options.basePath = resolveRoot;
  options.filename = this.resource;
  var tmplFunc = slm.compile(source, options);
  
  // watch for changes in every referenced file
  Object.keys(slm.template.VM.prototype._cache).forEach(function(dep) {
    this.addDependency(dep);
  }, this);

  // slm cache used to remember paths to all referenced files
  // purge cache after each run to force rebuild on changes

  // each cached chunk is deleted from original object,
  // cause it's referenced by slm internally in other places
  // replacing cache with new object {} will break hot reload
  Object.keys(slm.template.VM.prototype._cache).forEach(function(dep) {
    delete slm.template.VM.prototype._cache[dep];
  });
  
  return tmplFunc();
};

